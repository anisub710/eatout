ggplot(data = mpg) +
geom_bar(mapping = aes(x = class, color = class), size = 1)
shiny::runApp('Downloads')
# install.packages(c('ggplot2', 'shiny'))
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
# Create a `reactiveValues()` variable
iris.data <- iris
iris.metrics <- iris.data %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
# Define a UI using a fluidPage layout
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# Define a Server function for the app
my.server <- function(input, output) {
dataset = reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
shinyServer(server)
shinyApp(ui = my.ui, server = my.server)
iris.data <- iris
iris.metrics <- iris.data %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
View(iris.metrics)
# install.packages(c('ggplot2', 'shiny'))
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
# Create a `reactiveValues()` variable
iris.data <- iris
iris.metrics <- iris.data %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
#View(iris.metrics)
# Define a UI using a fluidPage layout
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# Define a Server function for the app
my.server <- function(input, output) {
dataset = reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
shinyServer(server)
shinyApp(ui = my.ui, server = my.server)
iris[sample(nrow(iris), input$sampleSize),]
my.server <- function(input, output) {
dataset = reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# Define a Server function for the app
my.server <- function(input, output) {
dataset = reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
a
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# install.packages(c('ggplot2', 'shiny'))
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
# Create a `reactiveValues()` variable
iris.data <- iris
iris.metrics <- iris.data %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
#View(iris.metrics)
# Define a UI using a fluidPage layout
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# Define a Server function for the app
my.server <- function(input, output) {
dataset = reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
shinyServer(server)
shinyApp(ui = my.ui, server = my.server)
# install.packages(c('ggplot2', 'shiny'))
library(rsconnect)
library(shiny)
library(ggplot2)
library(plotly)
# Create a `reactiveValues()` variable
iris.data <- iris
iris.metrics <- iris.data %>%
select(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
#View(iris.metrics)
# Define a UI using a fluidPage layout
my.ui <- fluidPage(
# declare the page titlePanel to be "Anderson's Iris Data Set Visualization"
titlePanel("Anderson's Iris Data Set Visualization"),
# Include a `sidebarLayout()`
sidebarLayout(
# The `siderbarPanel()` should have the following control widgets:
sidebarPanel(
# selects all
checkboxGroupInput("checkGroup",
label = h3("Which Species?"),
choices = c("Setosa" = "setosa",
"Versicolor" = "versicolor", "Virginica" = "virginica"),
selected = c("setosa", "versicolor", "virginica"), inline = TRUE),
# A sliderInput labeled "Price (in dollars)". This slider should let the user pick a range
# between the minimum and maximum price of the entire diamond data set
sliderInput('sampleSize', 'Sample Size?', min = 25, max = 150,
value = 100, step = 5),
selectInput("selectX", label = h3("Select x-axis"),
choices = names(iris.metrics)),
selectInput("selectY", label = h3("Select y-axis"),
choices = names(iris.metrics), names(iris.metrics)[[2]]),
numericInput("plotSize", label = h3("Size of Plots"), min = 0.5, max = 4, step = 0.5, value = 1.5),
# A checkboxInput labeled "Show Trendline". It's default value should be TRUE
checkboxInput('bestFit', label=strong("Show Line of Best Fit"), value=TRUE)
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Plot", plotlyOutput("plot")),
tabPanel("Table", dataTableOutput("table")))
# A plotOutput showing a plot based on the user specifications
)
)
)
# Define a Server function for the app
my.server <- function(input, output) {
dataset <- reactive({
iris[iris$Species%in%input$checkGroup,]
iris[sample(nrow(iris), input$sampleSize),]
})
output$plot <- renderPlotly({
p <- ggplot(iris.data %>% filter(Species %in% input$checkGroup), aes_string(x = input$selectX, y = input$selectY,
group = c("Species"),
color = c("Species"))) + geom_point(size = input$plotSize)
if(input$bestFit) {
p <- p + geom_smooth(se = TRUE, size = input$plotSize)
}
return(ggplotly(p))
})
output$table <- renderDataTable({
return(dataset())
})
}
shinyServer(server)
shinyApp(ui = my.ui, server = my.server)
shiny::runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
shiny::runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
shiny::runApp('Desktop/INFO 210/final_project_demo')
install.package('geojsonio')
install.packages('geojsonio')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
shiny::runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
shiny::runApp('Desktop/INFO 210/final_project_demo')
shiny::runApp('Desktop/INFO 210/final_project_demo')
runApp('Desktop/INFO 210/final_project_demo')
setwd("~/")
setwd("~/Desktop/INFO 210/final_project_demo")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?a
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
