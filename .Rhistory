intro.e.count <- str_count(my.intro, pattern = "e")
print(intro.e.count)
spring.break <- as.Date("2017-03-18")
today <- Sys.Date()
days.to.break <- spring.break - today
print(days.to.break)
MakeBirthdayIntro <- function(name, age, birthday){
days_till_bday <- birthday - today
birthday_intro <- paste(MakeIntroduction(name, age), "In", days_till_bday,
"days I'll be", age + 1)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017-10-07")
library("stringr")
my.age <- 19
my.name <- "Anirudh Kumar Subramanyam"
#function that takes two strings: name and age, and returns an introduction
MakeIntroduction <- function(name, age){
intro <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(intro)
}
#variable to store an introduction with my name and age
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
# variable to store a casual introduction by substituting
#"Hello, my name is" with "Hey, Im"
casual.intro <- sub("Hello, my name is", "Hey, I'm", my.intro)
print(casual.intro)
#variable to store introduction with each word capitalized
capital.intro <- str_to_title(my.intro)
print(capital.intro)
#variable to store the number of e's in my.intro
intro.e.count <- str_count(my.intro, pattern = "e")
print(intro.e.count)
spring.break <- as.Date("2017-03-18")
today <- Sys.Date()
days.to.break <- spring.break - today
print(days.to.break)
MakeBirthdayIntro <- function(name, age, birthday){
days_till_bday <- birthday - today
birthday_intro <- paste(MakeIntroduction(name, age), "In", days_till_bday,
"days I'll be", age + 1)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, as.Date("2017-10-07"))
print(my.bday.intro)
print(top.three.books)
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family (Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family (Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family (Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family(Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
book.without.four <- books[1:3, 5:6]
book.without.four <- books[1, 2, 3, 5, 6]
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family(Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
indices <- c(1,2,3,5,6)
book.without.four <- books[indices]
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family(Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
indices <- c(1,2,3,5,6)
book.without.four <- books[indices]
print(book.without.four)
books <- c("My Journey: Transforming dreams to actions", "Batman: Death of the Family(Story arch)",
"Invisible Man","What Got You Here Won't Get You There","Lord of the Flies",
"Soul of a Butterfly")
print(books)
top.three.books <- books[1:3]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
indices <- c(1,2,3,5,6)
book.without.four <- books[indices]
print(book.without.four)
long.titles <- books[nchar(books) > 15]
print(long.titles)
numbers <- seq(1,201)
squared.numbers <- numbers*numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
squares <- number[sqrt(numbers) == round(sqrt(numbers))]
numbers <- seq(1,201)
squared.numbers <- numbers*numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
numbers <- seq(1,201)
squared.numbers <- numbers*numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
data("Seatbelts")
seatbelts <- data.frame(Seatbelts)
View(seatbelts)
seatbelts.high <- seatbelts[seatbelts$drivers > 1600, ]
View(seatbelts.high)
print(seatbelts.high)
seatbelts.high <- length(seatbelts$drivers[seatbelts$drivers > 1600])
print(seatbelts.high)
seatbelts.high <- nrow(seatbelts[seatbelts$drivers > 1600,])
print(seatbelts.high)
install.packages("httr")
library(httr)
library("httr")
library("jsonlite")
GET("http://data.unhcr.org/api/stats/time_series_all_years.json")
GET("http://data.unhcr.org","/api/stats/time_series_all_years.json")
GET(base.uri, resource)
base.uri <- "http://data.unhcr.org"
resource <- "/api/stats/time_series_all_years.json"
GET(base.uri, resource)
GET(paste0(base.uri, resource))
GET("http://data.unhcr.org/api/stats/time_series_all_years.json")
GET("http://data.unhcr.org/api/stats/time_series_all_years.json?population_type_code=AS&country_of_origin=AFG&country_of_residence=CHE")
library(shiny)
source('~/.active-rstudio-document')
library("shiny")
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output){
}
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1("Dope"),
textInput('user.name', label = "What is your name?")
)
shinyApp(ui = my.ui, server = my.server)
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/shiny-practice')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-1')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-1')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-1')
response <- GET("http://terminal2.expedia.com/x/hotels?location=47.6063889,-122.3308333&radius=5km"")
library("jsonlite")
library("httr")
library("jsonlite")
response <- GET("http://terminal2.expedia.com/x/hotels?location=47.6063889,-122.3308333&radius=5km"")
body <- content(response, "text")
response <- GET("http://terminal2.expedia.com/x/hotels?location=47.6063889,-122.3308333&radius=5km")
response <- GET("https://www.googleapis.com/travelpartner/v1.2/hotels?type=ALL")
body <- content(response, "text")
print(response)
response <- GET("https://api.yelp.com/v3/businesses/search")
print(response)
body <- content(response, "text")
body
?POST
response <- POST("https://api.yelp.com/oauth2/token", query = search.query)
search.query <- list(grant_type = "client_credentials", client_id = "oUBxMAlVRNvt92rrkhyqCw",
client_secret =
"r084ZHHwidD5SvbKQrbTEvuOVsLn8koFiZTuVqN0nI6j0wBsgdQdPdqO7vddfBz6")
response <- POST("https://api.yelp.com/oauth2/token", query = search.query)
reponse
response <- POST("https://api.yelp.com/oauth2/token", query = search.query)
response
body <- content(response, "text")
body
body <- fromJSON(content(response, "text"))
body
access_token <- body$access_token
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
add_headers(Bearer access_token = access_token)
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
add_headers(Bearer access_token = access_token))
?GET
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
add_headers("Bearer access_token" = access_token))
first.response
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
authenticate("Bearer access_token" = access_token))
access_token <- body$access_token
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
add_headers("Bearer access_token" = access_token))
first.response
first.body <- fromJSON(content(first.response, "text"))
first.body
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
query = first.query)
first.query <- list(oauth = access_token)
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
query = first.query)
first.response
first.body <- fromJSON(content(first.response, "text"))
first.body
?sign_oauth2.0
?config
?HEAD
HEAD("https://api.yelp.com/v3", config(token = access_token))
header <- HEAD("https://api.yelp.com/v3", config(token = access_token))
access_token <- body$access_token
header <- HEAD("https://api.yelp.com/v3", config(token = access_token))
access_token
header <- HEAD("https://api.yelp.com/v3", config(token = "yweqTXomlxGi_YeT86B1JhwPr8EdzljgxLPE4dutNuedrLqE_YW1Y_2wWCUPZ4u9QdH6aU-gr8Q7w_QJgsaavt6-auMn53iCwJSMDo557Wviktlu-wBQQSH1b2-uWHYx"))
header <- HEAD("https://api.yelp.com/v3", config(token == "yweqTXomlxGi_YeT86B1JhwPr8EdzljgxLPE4dutNuedrLqE_YW1Y_2wWCUPZ4u9QdH6aU-gr8Q7w_QJgsaavt6-auMn53iCwJSMDo557Wviktlu-wBQQSH1b2-uWHYx"))
header <- HEAD("https://api.yelp.com/v3", config(token = body))
header <- HEAD("https://api.yelp.com/v3", config(token = body$access_token))
parsed_creds <- parse_url(body$access_token))
parsed_creds <- parse_url(body$access_token)
header <- HEAD("https://api.yelp.com/v3", config(token = parsed_creds)
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
query = first.query)
first.response
first.body <- fromJSON(content(first.response, "text"))
first.body
?config
header <- HEAD("https://api.yelp.com/v3", config(token = parsed_creds)
first.response <- GET("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972",
query = first.query)
first.response
first.body <- fromJSON(content(first.response, "text"))
first.body
?config
header <- HEAD("https://api.yelp.com/v3", config(token = parsed_creds))
header <- HEAD("https://api.yelp.com/v3", config(token = parsed_creds$path))
test <-  parsed_creds$path
header <- HEAD("https://api.yelp.com/v3", config(token = test))
shiny::runApp('Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2')
runApp('Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2')
setwd("~/Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2")
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ask710', token='98FFB80B66CB8E017B1238789C45855B', secret='h2bxtkkzQYSjgXZ0CbyNSnURR5sbKTaXBeaeuxmH')
rsconnect::deployApp('/Users/anirudhsubramanyam/Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2/app.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ask710', token='98FFB80B66CB8E017B1238789C45855B', secret='h2bxtkkzQYSjgXZ0CbyNSnURR5sbKTaXBeaeuxmH')
library(rsconnect)
rsconnect::deployApp('/Users/anirudhsubramanyam/Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2/')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ask710', token='98FFB80B66CB8E017B1238789C45855B', secret='h2bxtkkzQYSjgXZ0CbyNSnURR5sbKTaXBeaeuxmH')
rsconnect::deployApp('/Users/anirudhsubramanyam/Desktop/UW/Quarter 2/INFO 201/Practice/module15-shiny/exercise-2/')
query <- list(offset = 0)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972&limit=50", query = query, add_headers(Authorization = access.code))
library(leaflet)
library(shiny)
library(httr)
library(jsonlite)
source("accessToken.R")
source("~/Desktop/UW/Quarter 2/INFO 201/Assignments/a6-data-visualization-ask710/Practice2.R")
access.code
query <- list(offset = 0)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972&limit=50", query = query, add_headers(Authorization = access.code))
setwd("~/Desktop/UW/Quarter 2/INFO 201/Assignments/info201-final-project")
#install.packages("leaflet")
library(leaflet)
library(shiny)
library(httr)
library(jsonlite)
source("accessToken.R")
access.code
query <- list(offset = 0)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=delis&latitude=37.786882&longitude=-122.399972&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
response <-GET ("https://api.yelp.com/v3/businesses/search?location=Seattle&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&location=Seattle&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&location=98105&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
query.second <- list(offset = 50)
query.second <- list(offset = 50)
response.second <- GET("https://api.yelp.com/v3/businesses/search?term=food&location=98105&limit=50", query = query.second, add_headers(Authorization = access.code))
body.second <- fromJSON(content(response.second, "text"))
data.second <- body.second$businesses
View(data.second)
runApp('prac_ui.R')
runApp('prac_ui.R')
runApp('prac_ui.R')
query <- list(offset = 0)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&location=98105&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
access.code
input$chosen.location
source("prac_ui.R")
runApp('prac_ui.R')
runApp('prac_ui.R')
View(data)
runApp('prac_ui.R')
runApp()
ui <- fluidPage(
titlePanel("EatOut"),
sidebarLayout(
sidebarPanel(
textInput('chosen.location', "Location", value = "", placeholder = "Enter a city name, zip code, or address")
),
mainPanel(
dataTableOutput('table')
)
)
)
server <- function(input, output){
locationData <- reactive({
input.location <- input$chosen.location
query <- list(location = input.location)
response <- GET(base.url, query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
return(data)
})
output$table <- renderDataTable({
return(locationData())
})
}
shinyApp(ui = ui, server = server)
setwd("~/Desktop/UW/Quarter 2/INFO 201/Practice/final_project_demo")
source("accessToken.R")
source("accessToken.R")
library(leaflet)
library(shiny)
library(httr)
library(jsonlite)
?textInput
dataTableOutput()
?dataTableOutput
runApp()
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
response
query <- list(location = n)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
response.second <- GET("https://api.yelp.com/v3/businesses/search?term=food&location=98105&limit=50", query = query.second, add_headers(Authorization = access.code))
query.second <- list(offset = 50)
#install.packages("leaflet")
library(leaflet)
library(shiny)
library(httr)
library(jsonlite)
response.second <- GET("https://api.yelp.com/v3/businesses/search?term=food&location=98105&limit=50", query = query.second, add_headers(Authorization = access.code))
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
query <- list(location = "Seattle")
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
response
query <- list(location = n)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
query <- list(location = input)
input <- "Seattle"
query <- list(location = input)
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
response
runApp()
runApp()
data <- flatten(body$businesses)
data <- body$businesses
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
query <- list(location = input)
input <- "Seattle"
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
View(data)
typeof(data)
typeof(unlist(data))
dataframe(matrix(unlist(data)))
data.frame(matrix(unlist(data)))
data.test <- data.frame(matrix(unlist(data)))
View(data.test)
data.test <- data.frame(matrix(unlist(data), nrow = 50, byrow = T))
response <-GET ("https://api.yelp.com/v3/businesses/search?term=food&limit=50", query = query, add_headers(Authorization = access.code))
body <- fromJSON(content(response, "text"))
data <- body$businesses
data.test <- data.frame(matrix(unlist(data), nrow = 50, byrow = T))
data <- body$businesses
View(data)
View(data.test)
typeof(data$coordinates)
typeof(data$categories)
typeof(data$location)
typeof(data$coordinates)
typeof(data$rating)
data.test <- flatten(data$coordinates)
View(data.test)
typeof(data.test)
data.test <- flatten(data$coordinates)
typeof(data.test)
?flatten
body <- content(response)
body <- content(response)
r.list <- body$businesses[[1]]$location
names(r.list) <- NULL
tojson <- toJSON(r.list)
df <-  flatten(fromJSON(tojson, flatten=TRUE))
tojson <- toJSON(r.list)
r.list <- body$businesses[[1]]$location$display_address
names(r.list) <- NULL
tojson <- toJSON(r.list)
df <-  flatten(fromJSON(tojson, flatten=TRUE))
r.list <- body$businesses[[1]]$location
names(r.list) <- NULL
names(r.list) <- NULL
tojson <- toJSON(r.list)
r.list <- body$businesses[[1]]$coordinates
names(r.list) <- NULL
tojson <- toJSON(r.list)
df <-  flatten(fromJSON(tojson, flatten=TRUE))
runApp()
runApp()
?absolutePanel
runApp()
runApp()
print(input$map_click)
runApp()
?else
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(input$map_bounds)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/UW/Quarter 2/INFO 201/Assignments/a8-data-app-ask710')
runApp()
runApp()
runApp()
runApp()
?wellPanel
setwd("~/Desktop/UW/Quarter 2/INFO 201/Practice/final_project_demo")
restaurant.ratings <- read.csv("data/yelpRatings.csv")
View(restaurant.ratings)
colnames(restaurant.ratings) <- c("ratings, county, state")
colnames(restaurant.ratings) <- c("ratings", "county", "state")
state
state.abb
View(state.abb)
library(maps)
maps
state.area
usaMapEnv
View(usaMapEnv)
data("usaMapEnv")
View(usaMapEnv)
?map_data
map_data(usa)
library(ggplot2)
map_data(usa)
leafletMap()
?leaflet()
map_data(usa)
map_data("usa")
View(usa)
usa <- map_data("usa")
View(usa)
m <- leaflet() %>%
addTiles() #%>%
m
m <- leaflet() %>%
addTiles(data = restaurant.ratings) #%>%
m <- leaflet(data = restaurant.ratings) %>%
addTiles() #%>%
m
mapStates = map("state", fill = TRUE, plot = FALSE)
data(mapStates)
mapStates <- map("state", fill = TRUE, plot = FALSE)
data(mapStates)
data(state)
state <- data(state)
